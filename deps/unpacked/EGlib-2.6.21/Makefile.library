# =============================================================================
# This is the Makefile.library of EGlib
# - 2007-12-27
# 					- Separate template and library creation
# - 2007-12-20
# 					- Update to create a full .h and improve support for x86_64 
# 						and mac OSX, and to generate a unified library interface
# - 2005-08-17
#						- Update EGlib.so rule
# - 2005-08-01 
#						- Update to generate templates, and compute dependencies on the 
#							fly
# - 2003-11-18 
#						- Update to automatic dependency generation
# =============================================================================

# =============================================================================
# Here we read some configurations, you should edit this file instead 
# of this makefile
include Makefile.common

#==============================================================================
# Default targets to do
.PHONY: indent doc clean selftest default
DEFAULT += selftest $(LIB_DIR)/lib$(PACKAGE_NAME).a include/$(PACKAGE_NAME).h $(MAIN_PROG)
default: $(DEFAULT) 
make.conf: ;
Makefile.library : ;

#==============================================================================
# Some extra dependencies
$(OBJ_FILE): make.conf
$(MAIN_OFILE): make.conf

#==============================================================================
# Rules for objective files
$(ALL_OFILE): $(OBJ_DIR)/%.o : %.c
	@echo Compiling $<
	@$(CC) $(SW) $(CCFLAGS) $(MAINOPT) -c $< -o $@ 

#==============================================================================
# check some stuff in here
selftest: 
	@if [ ! -d $(LIB_DIR) ]; then mkdir -p $(LIB_DIR); fi
	@if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR); fi
	@if [ ! -d $(DEP_DIR) ]; then mkdir -p $(DEP_DIR); fi
	@if [ ! -d $(ALT_DIR) ]; then mkdir -p $(ALT_DIR); fi
	@if [ ! -d $(BIN_DIR) ]; then mkdir -p $(BIN_DIR); fi

# rule to force an action
FORCE:

# =============================================================================
# we should re-compile the version to correctly print the package version
# $(OBJ_DIR)/$(PACKAGE_NAME)_version.o: FORCE $(PACKAGE_NAME)_version.c
$(OBJ_DIR)/$(PACKAGE_NAME)_version.o : FORCE

#==============================================================================
# include files for dependencies
include $(DEP_FILE)

#==============================================================================
# Targets to be done

doc: $(INC_FILE) $(SOURCE_FILE) $(DEP_FILE) Doxyfile
	@echo "Generating Documentation..." && doxygen

#ifeq ($(OS),$(OSXMAC))
#SHARED_FLAG := -dynamiclib
#endif
#ifeq ($(OS),$(LINUX))
#SHARED_FLAG := -shared
#endif

$(LIB_DIR)/$(PACKAGE_NAME).so: $(OBJ_FILE) include/$(PACKAGE_NAME).h make.conf
	@echo Linking $@
	@rm -f $@
	@$(CC) $(SW) -o $@ $(SHARED_FLAG) $(filter %.o,$^) $(CCFLAGS) 

$(LIB_DIR)/lib$(PACKAGE_NAME).a: $(OBJ_FILE) include/$(PACKAGE_NAME).h make.conf
	@echo Linking $@
	@rm -f $@ $(LIB_DIR)/$(PACKAGE_NAME).a
	@$(AR) cq $@ $(filter %.o,$^)
	@$(RANLIB) $@
	@ln $@ $(LIB_DIR)/$(PACKAGE_NAME).a

clean:
	-@rm -Rf doc/*
	-@rm -f $(ALL_OFILE) $(MAIN_PROG) $(MAIN_PROG_DYN) $(MAIN_PROG_ST) $(LIB_DIR)/lib$(PACKAGE_NAME).a $(LIB_DIR)/$(PACKAGE_NAME).so  $(PACKAGE_NAME)_version.c
	-@rm -f include/$(PACKAGE_NAME).h

IDENTFLAGS := -bli0 -i2 -lc79 -lps -sc -cdw -bfda -psl -nbc -npsl \
							-ut -ts2 -bad -bap -bl -l80

indent:
	-@for j in $(SOURCE_DIR); do for i in $$j/*.c; do indent $$i -o _ind_ $(IDENTFLAGS) && mv _ind_ $$i && echo "Indenting $$i"; done ; done
	-@for j in $(INCLUDE_DIR); do for i in $$j/*.h; do indent $$i -o _ind_ $(IDENTFLAGS) && mv _ind_ $$i && echo "Indenting $$i"; done; done

$(MAIN_PROG): $(BIN_DIR)/% : %.o lib$(PACKAGE_NAME).a $(addsuffix .a,$(LIB_FILES))
	@echo Linking $@
	@$(CC) $(SW) $(INCLUDEDIR) $(MAINOPT) $< $(CCFLAGS) $(LD_ALL_OPTION) $(filter %.a,$^) $(LD_NOALL_OPTION) $(LIB_FLAGS) -o $@ 

$(MAIN_PROG_ST): $(BIN_DIR)/%_st : %.o lib$(PACKAGE_NAME).a $(addsuffix .a,$(LIB_FILES))
	@echo Linking $@
	@$(CC) -static -static-libgcc $(SW) $(INCLUDEDIR) $(MAINOPT) $< $(LD_ALL_OPTION) $(filter %.a,$^) $(filter %.so,$^) $(LIB_FLAGS) $(LD_NOALL_OPTION) $(CCFLAGS) -o $@ 

$(MAIN_PROG_DYN): $(BIN_DIR)/%_dyn : %.o lib$(PACKAGE_NAME).so $(addsuffix .so,$(LIB_FILES)) tags
	@echo Linking $@ 
	@$(CC) $(SW) $(INCLUDEDIR) $(MAINOPT) $< $(filter %.so,$^) $(CCFLAGS) $(LIB_FLAGS) -o $@ 

include/$(PACKAGE_NAME).h: $(ALT_DIR)/base_$(PACKAGE_NAME).h make.conf $(CONFIG_HEADER)
	@echo Building $@
	@rm -f $@
	@echo "/* ========================================================================== */" >> $@
	@echo "#ifndef __$(PACKAGE_NAME)__" >> $@
	@echo "#define __$(PACKAGE_NAME)__" >> $@
	@cat $(CONFIG_HEADER) >> $@
	@cat $(ALT_DIR)/base_$(PACKAGE_NAME).h >> $@
	@echo "/* ========================================================================== */" >> $@
	@echo "#endif" >> $@

# end of Makefile.library
# =============================================================================
